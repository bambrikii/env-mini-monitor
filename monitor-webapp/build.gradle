buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}
plugins {
    id 'java'
//    id 'com.gradle.build-scan' version '2.0.2'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

sourceCompatibility = 1.8

apply plugin: 'base'
apply plugin: 'com.moowork.node'

dependencies {
    compile project(":monitor-webapp-loader")

    compile("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-web")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

apply from: "../common-dependencies.gradle"

// https://dzone.com/articles/integrating-java-and-npm-builds-using-gradle
node {
    version = '10.14.1'
    npmVersion = '6.4.1'
    download = true
}

npm_run_build {
    inputs.files fileTree("public")
    inputs.files fileTree("src")
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    outputs.dir 'build'
}

task packageNpmApp(type: Zip) {
    dependsOn npm_run_build
    baseName 'npm-app'
    extension 'jar'
    destinationDir file("${projectDir}/build_packageNpmApp")
    from('build') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}

configurations {
    npmResources
}
configurations.default.extendsFrom(configurations.npmResources)
artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type "jar"
    }
}

assemble.dependsOn npm_run_build
assemble.dependsOn packageNpmApp

String testsExecutedMarkerName = "${projectDir}/.tests.executed"
task test_npm(type: NpmTask) {
    dependsOn assemble
    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    environment CI: 'true'
    args = ['run', 'test']
    inputs.files fileTree('src')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}

check.dependsOn test_npm

clean {
    delete packageNpmApp.archivePath
    delete testsExecutedMarkerName
}
